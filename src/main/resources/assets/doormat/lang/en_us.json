{
  "carpet.rule.leavesNoCollision.desc": "Disables the tangibility of leaves, making it easier to traverse areas with lots of trees",
  "carpet.rule.consistentItemExplosionDamage.desc": "Blocks that are immune to certain kinds of damage also apply this property to their item variants",
  "carpet.rule.playerDropAllXp.desc": "Players drop all of their XP on death instead of a capped amount",
  "carpet.rule.beaconsHealPets.desc": "Beacons with their secondary effect set to regeneration can heal nearby tamed mobs",
  "carpet.rule.disablePetAttacking.desc": "Disables players harming tamed mobs",
  "carpet.rule.insomniaDaysSinceSlept.desc": "The number of sleepless nights after which phantoms can spawn",
  "carpet.rule.phantomMinSpawnAltitude.desc": "Phantoms will only spawn when the instigator is standing above this y height",
  "carpet.rule.maxMinecartSpeed.desc": "The speed minecarts can travel in blocks per second",
  "carpet.rule.disableNetherTeleporting.desc": "Disables opening and travelling through nether portals in the overworld",
  "carpet.rule.disableEndTeleporting.desc": "Disables opening and travelling through end portals in the overworld",

  "carpet.rule.renewableGildedBlackstone.desc": "Blackstone adjacent to underwater magma blocks slowly becomes gilded over time",
  "carpet.rule.renewableCobwebs.desc": "Cave spider spawners generate cobwebs between solid faces each spawn cycle",
  "carpet.rule.renewableSporeBlossoms.desc": "Whether spore blossoms should generate when this block is fertilized",
  "carpet.rule.huskWashing.desc": "Adult husks drop 1-3 sand when converting into zombies",
  "carpet.rule.mossSpreadToCobblestone.desc": "Moss can convert nearby cobblestone to mossy cobblestone when fertilized",
  "carpet.rule.mossSpreadToStoneBricks.desc": "Moss can convert nearby stone bricks to mossy stone bricks when fertilized",
  "carpet.rule.forceGrassSpread.desc": "Grass and mycelium can spread to adjacent dirt when the dirt is fertilized",
  "carpet.rule.azaleaLeavesGrowFlowers.desc": "Azalea leaves grow flowers when fertilized",
  "carpet.rule.accurateAzaleaLeafDistribution.desc": "The distribution of azalea leaf types matches the azalea bush the tree is grown from",
  "carpet.rule.growSwampOakTrees.desc": "Oak trees grow into swamp oaks in swamp biomes",
  "carpet.rule.propagulePropagation.desc": "Mangrove propagules actually propagate, falling from trees and planting themselves automatically",
  "carpet.rule.zoglinsSpawnInPortals.desc": "Zoglins have a chance of spawning inside overworld nether portals",

  "carpet.rule.thornyRoseBush.desc": "Similarly to sweet berry bushes, rose bushes deal damage when you walk inside them",

  "carpet.rule.stickyStickyPistons.desc": "Sticky pistons act like directional slime blocks",
  "carpet.rule.stickyPillarBlocks.desc": "Pillar blocks like logs and bone blocks stick to each other based on the axis direction when moved",
  "carpet.rule.pistonMovementTime.desc": "The number of ticks it takes for a piston to extend or retract",

  "carpet.rule.lampUpdateType.desc": "The type of update redstone lamps emit when changing state",
  "carpet.rule.doorUpdateType.desc": "The type of update doors emit when changing state",
  "carpet.rule.trapdoorUpdateType.desc": "The type of update trapdoors emit when changing state",
  "carpet.rule.fenceGateUpdateType.desc": "The type of update fence gates emit when changing state",
  "carpet.rule.pistonUpdateType.desc": "The type of update pistons emit when changing state",
  "carpet.rule.noteBlockUpdateType.desc": "The type of update note blocks emit when changing state",
  "carpet.rule.hopperUpdateType.desc": "The type of update hoppers emit when changing state",
  "carpet.rule.dispenserUpdateType.desc": "The type of update dispensers and droppers emit when changing state",
  "carpet.rule.bellUpdateType.desc": "The type of update bells emit when changing state",
  "carpet.rule.tntUpdateType.desc": "The type of update TNT emits when changing state",

  "carpet.rule.lampQuasiConnecting.desc": "Whether redstone lamps should look for quasi-power",
  "carpet.rule.trapdoorQuasiConnecting.desc": "Whether trapdoors should look for quasi-power",
  "carpet.rule.fenceGateQuasiConnecting.desc": "Whether fence gates should look for quasi-power",
  "carpet.rule.pistonQuasiConnecting.desc": "Whether pistons should look for quasi-power",
  "carpet.rule.noteBlockQuasiConnecting.desc": "Whether note blocks should look for quasi-power",
  "carpet.rule.hopperQuasiConnecting.desc": "Whether hoppers should look for quasi-power",
  "carpet.rule.dispenserQuasiConnecting.desc": "Whether dispensers and droppers should look for quasi-power",
  "carpet.rule.bellQuasiConnecting.desc": "Whether bells should look for quasi-power",
  "carpet.rule.tntQuasiConnecting.desc": "Whether TNT should look for quasi-power",

  "carpet.rule.parityPortalTicking.desc": "Nether portal blocks randomTick when lit, like they do on Bedrock Edition",
  "carpet.rule.parityRavagersStompPlants.desc": "Ravagers can break flowers, like they can on Bedrock Edition",
  "carpet.rule.parityFireAspectLighting.desc": "Fire aspect can be used to light campfires, candles and TNT, like it can on Bedrock Edition",
  "carpet.rule.parityComparatorsReadThroughChains.desc": "Comparators can read through chains, like they can on Bedrock Edition",
  "carpet.rule.parityComparatorsReadThroughPaths.desc": "Comparators can read through dirt paths, like they can on Bedrock Edition",

  "carpet.rule.commandRandomTick.desc": "Enables a command to forcibly send randomTicks to the specified block position",



  "carpet.rule.consistentItemExplosionDamage.extra.0": "The IDs of the blocks this affects are defined in doormat/tags/items/explosion_immune_items.json.",
  "carpet.rule.disablePetAttacking.extra.0": "\"if_owner\" disallows players to hit pets that aren't their own.",

  "carpet.rule.maxMinecartSpeed.extra.0": "Underwater max speed will always be half of this number.",
  "carpet.rule.disableNether.extra.0": "You can still create and travel through portals in the nether, to save getting stranded there.",
  "carpet.rule.disableEnd.extra.0": "You can still create and travel through the portal in the end, to save getting stranded there.",

  "carpet.rule.renewableCobwebs.extra.0": "Cobwebs generate within a 9x9x9 cube centred on the spawner, forming only in block positions that have two or more supporting faces.",
  "carpet.rule.renewableCobwebs.extra.1": "The more supporting faces, the more likely the cobweb is to generate.",
  "carpet.rule.renewableSporeBlossoms.extra.0": "\"self\" drops an item the same way tall flowers do.",
  "carpet.rule.mossSpreadToCobblestone.extra.0": "This feature is controlled through doormat/worldgen/configured_feature/mossy_cobblestone_patch.json.",
  "carpet.rule.mossSpreadToStoneBricks.extra.0": "This feature is controlled through doormat/worldgen/configured_feature/mossy_stone_bricks_patch.json.",
  "carpet.rule.forceGrassSpread.extra.0": "This behaves the same as nylium in vanilla.",
  "carpet.rule.accurateAzaleaLeafDistribution.extra.0": "This feature is controlled through doormat/worldgen/configured_feature/azalea_tree_<many/no>_flowers.json.",

  "carpet.rule.stickyStickyPistons.extra.0": "\"stick_to_all\" causes them to be omnidirectional like normal slime blocks.",
  "carpet.rule.stickyPillarBlocks.extra.0": "\"stick_to_all\" causes them to connect to each other regardless of axis direction.",

  "carpet.rule.thornyRoseBush.extra.0": "This even has a unique death message!",



  "carpet.command.randomTick.failed": "Could not random tick the block",
  "carpet.command.randomTick.success": "Sent %s random tick(s) to the block at %s, %s, %s",



  "death.attack.roseBush": "%1$s smelled the roses too much",
  "death.attack.roseBush.player": "%1$s smelled the roses too much whilst trying to escape %2$s"
}