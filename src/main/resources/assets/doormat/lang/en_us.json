{
  "carpet.command.randomTick.failed": "Could not random tick the block",
  "carpet.command.randomTick.success": "Sent %s random tick(s) to the block at %s, %s, %s",
  "carpet.rule.accurateAzaleaLeafDistribution.desc": "The distribution of azalea leaf types matches the azalea bush the tree is grown from",
  "carpet.rule.accurateAzaleaLeafDistribution.extra.0": "This feature is controlled through doormat/worldgen/configured_feature/azalea_tree_<many/no>_flowers.json.",
  "carpet.rule.azaleaLeavesGrowFlowers.desc": "Azalea leaves grow flowers when fertilized",
  "carpet.rule.beaconsHealPets.desc": "Beacons with their secondary effect set to regeneration can heal nearby tamed mobs",
  "carpet.rule.bellQuasiConnecting.desc": "Whether bells can be quasi-powered",
  "carpet.rule.bellUpdateType.desc": "The type(s) of update bells emit when changing state",
  "carpet.rule.commandRandomTick.desc": "Enables /randomtick command to forcibly send randomTicks to the specified block position",
  "carpet.rule.comparatorsReadThroughChains.desc": "Comparators can read through chains, like they can on Bedrock Edition",
  "carpet.rule.comparatorsReadThroughPaths.desc": "Comparators can read through dirt paths, like they can on Bedrock Edition",
  "carpet.rule.comparatorsReadThroughPistons.desc": "Comparators can read through pistons, like they can on Bedrock Edition",
  "carpet.rule.consistentItemExplosionDamage.desc": "Explosion-immune blocks also apply this property to their dropped item counterparts",
  "carpet.rule.disableEndPortalCrossing.desc": "Disables travelling through end portals",
  "carpet.rule.disableNetherPortalCrossing.desc": "Disables travelling through nether portals",
  "carpet.rule.disablePetAttacking.desc": "Disables players harming tamed mobs",
  "carpet.rule.disablePetAttacking.extra.0": "\"owned\" allows players to hit pets that aren't their own.",
  "carpet.rule.disableShulkerReproduction.desc": "Disables shulkers duplicating when hit by bullets",
  "carpet.rule.disableShulkerReproduction.extra.0": "Intended to be used alongside shulkerSpawningInEndCities.",
  "carpet.rule.dispenserUpdateType.desc": "The type(s) of update dispensers and droppers emit when changing state",
  "carpet.rule.doorUpdateType.desc": "The type(s) of update doors emit when changing state",
  "carpet.rule.fenceGateQuasiConnecting.desc": "Whether fence gates can be quasi-powered",
  "carpet.rule.fenceGateUpdateType.desc": "The type(s) of update fence gates emit when changing state",
  "carpet.rule.fireAspectLighting.desc": "Items enchanted with fire aspect can be used to light campfires, candles and TNT, like they can on Bedrock Edition",
  "carpet.rule.forceGrassSpread.desc": "Grass and mycelium can instantly spread to adjacent fertilized dirt",
  "carpet.rule.forceGrassSpread.extra.0": "This behaves the same as nylium in vanilla.",
  "carpet.rule.growableSwampOakTrees.desc": "Oak saplings grow into swamp oaks in swamp biomes",
  "carpet.rule.hopperQuasiConnecting.desc": "Whether hoppers can be quasi-powered",
  "carpet.rule.hopperUpdateType.desc": "The type(s) of update hoppers emit when changing state",
  "carpet.rule.huskWashing.desc": "Adult husks drop 1-3 sand when converting into zombies",
  "carpet.rule.insomniaDaysSinceSlept.desc": "The number of sleepless nights after which phantoms can spawn",
  "carpet.rule.lampQuasiConnecting.desc": "Whether redstone lamps can be quasi-powered",
  "carpet.rule.lampUpdateType.desc": "The type(s) of update redstone lamps emit when changing state",
  "carpet.rule.leavesNoCollision.desc": "Disables the tangibility of leaves, making it easier to traverse areas with lots of trees",
  "carpet.rule.maxMinecartSpeed.desc": "The maximum speed minecarts can travel at in blocks per second",
  "carpet.rule.maxMinecartSpeed.extra.0": "Underwater max speed will always be half of this number.",
  "carpet.rule.mossSpreadToCobblestone.desc": "Moss can convert nearby cobblestone to mossy cobblestone when fertilized",
  "carpet.rule.mossSpreadToCobblestone.extra.0": "This feature is controlled through doormat/worldgen/configured_feature/mossy_cobblestone_patch.json.",
  "carpet.rule.mossSpreadToStoneBricks.desc": "Moss can convert nearby stone bricks to mossy stone bricks when fertilized",
  "carpet.rule.mossSpreadToStoneBricks.extra.0": "This feature is controlled through doormat/worldgen/configured_feature/mossy_stone_bricks_patch.json.",
  "carpet.rule.noteBlockQuasiConnecting.desc": "Whether note blocks can be quasi-powered",
  "carpet.rule.noteBlockUpdateType.desc": "The type(s) of update note blocks emit when changing state",
  "carpet.rule.phantomMinSpawnAltitude.desc": "The minimum y height the player needs to be standing at in order to spawn phantoms",
  "carpet.rule.pistonMovementTime.desc": "The number of ticks it takes for a piston to extend or retract",
  "carpet.rule.pistonUpdateType.desc": "The type(s) of update pistons emit when changing state",
  "carpet.rule.playersDropAllXp.desc": "Players drop all of their XP on death instead of a capped amount",
  "carpet.rule.portalForceTicking.desc": "Nether portal blocks randomTick when lit, like they do on Bedrock Edition",
  "carpet.rule.propagulePropagation.desc": "Mangrove propagules actually propagate, falling from trees and planting themselves automatically",
  "carpet.rule.railQuasiConnecting.desc": "Whether rails can be quasi-powered",
  "carpet.rule.railUpdateType.desc": "The type(s) of update rails emit when changing state",
  "carpet.rule.ravagersStompPlants.desc": "Ravagers can break plants, like they can on Bedrock Edition",
  "carpet.rule.renewableCobwebs.desc": "Cave spider spawners generate cobwebs between nearby solid faces each spawn cycle",
  "carpet.rule.renewableCobwebs.extra.0": "Cobwebs generate within a 9x9x9 cube centred on the spawner, forming only in block positions that have two or more supporting faces.",
  "carpet.rule.renewableCobwebs.extra.1": "The more supporting faces, the more likely the cobweb is to generate.",
  "carpet.rule.renewableGildedBlackstone.desc": "Blackstone adjacent to underwater magma blocks slowly becomes gilded over time",
  "carpet.rule.renewableSporeBlossoms.desc": "Whether spore blossoms should generate when this block is fertilized",
  "carpet.rule.renewableSporeBlossoms.extra.0": "\"self\" drops an item the same way tall flowers do.",
  "carpet.rule.stickyPillarBlocks.desc": "Pillar blocks like logs and bone blocks stick to each other based on the axis direction when moved",
  "carpet.rule.stickyPillarBlocks.extra.0": "\"stick_to_all\" causes them to connect to each other regardless of axis direction.",
  "carpet.rule.stickyStickyPistons.desc": "Sticky pistons act like directional slime blocks",
  "carpet.rule.stickyStickyPistons.extra.0": "\"stick_to_all\" causes them to stick omnidirectionally like normal slime blocks.",
  "carpet.rule.thornyRoseBush.desc": "Similarly to sweet berry bushes, rose bushes deal damage when you walk inside them",
  "carpet.rule.thornyRoseBush.extra.0": "This even has a unique death message!",
  "carpet.rule.tntQuasiConnecting.desc": "Whether TNT can be quasi-powered",
  "carpet.rule.tntUpdateType.desc": "The type(s) of update TNT emits when changing state",
  "carpet.rule.trapdoorQuasiConnecting.desc": "Whether trapdoors can be quasi-powered",
  "carpet.rule.trapdoorUpdateType.desc": "The type(s) of update trapdoors emit when changing state",
  "carpet.rule.zoglinsSpawnInPortals.desc": "Zoglins have a chance of spawning inside overworld nether portals",
  "death.attack.roseBush": "%1$s smelled the roses too much",
  "death.attack.roseBush.player": "%1$s smelled the roses too much whilst trying to escape %2$s"
}